<root>
    <item name='kotlin.properties.NotNullVar void set(java.lang.Object, kotlin.PropertyMetadata, T) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadOnlyProperty&lt;java.lang.Object,T&gt; lazy(kotlin.Function0&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadOnlyProperty&lt;java.lang.Object,T&gt; blockingLazy(java.lang.Object, kotlin.Function0&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ReadWriteProperty void set(R, kotlin.PropertyMetadata, T) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadOnlyProperty blockingLazy$default(kotlin.properties.Delegates, java.lang.Object, kotlin.Function0, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.LazyVal LazyVal(kotlin.Function0&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ChangeEvent ChangeEvent(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ChangeEvent java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.PropertiesPackage kotlin.Function1&lt;kotlin.PropertyMetadata,java.lang.String&gt; getDefaultKeyProvider()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.NotNullVar T get(java.lang.Object, kotlin.PropertyMetadata) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.MapVar void set(T, kotlin.PropertyMetadata, V) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.properties.ChangeSupport void firePropertyChanged(kotlin.properties.ChangeEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVar K key(kotlin.PropertyMetadata) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.NotNullVar void set(java.lang.Object, kotlin.PropertyMetadata, T) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVal V default(T, kotlin.PropertyMetadata) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadWriteProperty mapVar$default(kotlin.properties.Delegates, java.util.Map, kotlin.Function2, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.BlockingLazyVal kotlin.Function0&lt;T&gt; getInitializer$b$1(kotlin.properties.BlockingLazyVal&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.KeyMissingException KeyMissingException(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVal FixedMapVal(java.util.Map&lt;? super K,? extends java.lang.Object&gt;, kotlin.Function1&lt;? super kotlin.PropertyMetadata,? extends K&gt;, kotlin.Function2&lt;? super T,? super K,? extends V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ChangeSupport void addChangeListener(java.lang.String, kotlin.properties.ChangeListener) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.MapVal K key(kotlin.PropertyMetadata) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVal FixedMapVal(java.util.Map, kotlin.Function1, kotlin.Function2, int) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadOnlyProperty mapVal$default(kotlin.properties.Delegates, java.util.Map, kotlin.Function2, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVar FixedMapVar(java.util.Map&lt;? super K,java.lang.Object&gt;, kotlin.Function1&lt;? super kotlin.PropertyMetadata,? extends K&gt;, kotlin.Function2&lt;? super T,? super K,? extends V&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.BlockingLazyVal kotlin.Function0&lt;T&gt; getInitializer$b$1(kotlin.properties.BlockingLazyVal&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadOnlyProperty&lt;java.lang.Object,T&gt; lazy(kotlin.Function0&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVar FixedMapVar(java.util.Map, kotlin.Function1, kotlin.Function2, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.MapVal V get(T, kotlin.PropertyMetadata) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ChangeSupport kotlin.properties.ReadWriteProperty&lt;java.lang.Object,T&gt; property(T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ReadWriteProperty void set(R, kotlin.PropertyMetadata, T) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.properties.MapVal java.util.Map&lt;? super K,java.lang.Object&gt; map(T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ChangeSupport void onPropertyChange(kotlin.Function1&lt;? super kotlin.properties.ChangeEvent,? extends kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ChangeEvent ChangeEvent(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.MapVar void set(T, kotlin.PropertyMetadata, V) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadWriteProperty&lt;java.lang.Object,T&gt; observable(T, kotlin.Function3&lt;? super kotlin.PropertyMetadata,? super T,? super T,? extends kotlin.Unit&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadWriteProperty&lt;java.lang.Object,T&gt; vetoable(T, kotlin.Function3&lt;? super kotlin.PropertyMetadata,? super T,? super T,? extends java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVar V default(T, kotlin.PropertyMetadata) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVal FixedMapVal(java.util.Map&lt;? super K,? extends java.lang.Object&gt;, kotlin.Function1&lt;? super kotlin.PropertyMetadata,? extends K&gt;, kotlin.Function2&lt;? super T,? super K,? extends V&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.BlockingLazyVal void setValue$b$0(kotlin.properties.BlockingLazyVal&lt;T&gt;, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.BlockingLazyVal T get(java.lang.Object, kotlin.PropertyMetadata) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ChangeSupport void onPropertyChange(java.lang.String, kotlin.Function1&lt;? super kotlin.properties.ChangeEvent,? extends kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ChangeSupport void addChangeListener(java.lang.String, kotlin.properties.ChangeListener) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadWriteProperty&lt;java.lang.Object,T&gt; mapVar(java.util.Map&lt;? super java.lang.String,java.lang.Object&gt;, kotlin.Function2&lt;? super java.lang.Object,? super java.lang.String,? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ReadWriteProperty T get(R, kotlin.PropertyMetadata) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVar FixedMapVar(java.util.Map, kotlin.Function1, kotlin.Function2, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.MapVar java.util.Map&lt;? super K,java.lang.Object&gt; map(T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVar FixedMapVar(java.util.Map&lt;? super K,java.lang.Object&gt;, kotlin.Function1&lt;? super kotlin.PropertyMetadata,? extends K&gt;, kotlin.Function2&lt;? super T,? super K,? extends V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadOnlyProperty mapVal$default(kotlin.properties.Delegates, java.util.Map, kotlin.Function2, int) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadWriteProperty mapVar$default(kotlin.properties.Delegates, java.util.Map, kotlin.Function2, int) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.PropertiesPackage java.lang.Object escape(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ObservableProperty void set(java.lang.Object, kotlin.PropertyMetadata, T) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.properties.PropertiesPackage.Delegation.809f9e88 kotlin.Function2&lt;java.lang.Object,java.lang.Object,java.lang.Void&gt; getDefaultValueProvider()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.PropertiesPackage.Delegation.809f9e88 java.lang.Object escape(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ObservableProperty ObservableProperty(T, kotlin.Function3&lt;? super kotlin.PropertyMetadata,? super T,? super T,? extends java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVal java.util.Map&lt;? super K,java.lang.Object&gt; map(T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadOnlyProperty mapVal$default(kotlin.properties.Delegates, java.util.Map, kotlin.Function2, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.NotNullVar T get(java.lang.Object, kotlin.PropertyMetadata)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadOnlyProperty&lt;java.lang.Object,T&gt; mapVal(java.util.Map&lt;? super java.lang.String,? extends java.lang.Object&gt;, kotlin.Function2&lt;? super java.lang.Object,? super java.lang.String,? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ChangeListener void onPropertyChange(kotlin.properties.ChangeEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadWriteProperty&lt;java.lang.Object,T&gt; notNull()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.PropertiesPackage kotlin.Function2&lt;java.lang.Object,java.lang.Object,java.lang.Void&gt; getDefaultValueProvider()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadOnlyProperty blockingLazy$default(kotlin.properties.Delegates, java.lang.Object, kotlin.Function0, int) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ChangeEvent java.lang.Object getSource()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadWriteProperty mapVar$default(kotlin.properties.Delegates, java.util.Map, kotlin.Function2, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ObservableProperty T get(java.lang.Object, kotlin.PropertyMetadata) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ReadWriteProperty T get(R, kotlin.PropertyMetadata)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.properties.PropertiesPackage.Delegation.809f9e88 kotlin.Function1&lt;kotlin.PropertyMetadata,java.lang.String&gt; getDefaultKeyProvider()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates INSTANCE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadWriteProperty&lt;java.lang.Object,T&gt; observable(T, kotlin.Function3&lt;? super kotlin.PropertyMetadata,? super T,? super T,? extends kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVar FixedMapVar(java.util.Map, kotlin.Function1, kotlin.Function2, int) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ChangeSupport void onPropertyChange(java.lang.String, kotlin.Function1&lt;? super kotlin.properties.ChangeEvent,? extends kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadWriteProperty&lt;java.lang.Object,T&gt; mapVar(java.util.Map&lt;? super java.lang.String,java.lang.Object&gt;, kotlin.Function2&lt;? super java.lang.Object,? super java.lang.String,? extends T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVar FixedMapVar(java.util.Map&lt;? super K,java.lang.Object&gt;, kotlin.Function1&lt;? super kotlin.PropertyMetadata,? extends K&gt;, kotlin.Function2&lt;? super T,? super K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ChangeEvent java.lang.String getName()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVal FixedMapVal(java.util.Map, kotlin.Function1, kotlin.Function2, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.BlockingLazyVal java.lang.Object getValue$b$0(kotlin.properties.BlockingLazyVal&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVar java.util.Map&lt;? super K,java.lang.Object&gt; map(T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadOnlyProperty mapVal$default(kotlin.properties.Delegates, java.util.Map, kotlin.Function2, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.MapVal V default(T, kotlin.PropertyMetadata) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ChangeSupport void changeProperty(java.lang.String, T, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadOnlyProperty&lt;java.lang.Object,T&gt; mapVal(java.util.Map&lt;? super java.lang.String,? extends java.lang.Object&gt;, kotlin.Function2&lt;? super java.lang.Object,? super java.lang.String,? extends T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadWriteProperty mapVar$default(kotlin.properties.Delegates, java.util.Map, kotlin.Function2, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ObservableProperty void set(java.lang.Object, kotlin.PropertyMetadata, T) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadWriteProperty&lt;java.lang.Object,T&gt; vetoable(T, kotlin.Function3&lt;? super kotlin.PropertyMetadata,? super T,? super T,? extends java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVal FixedMapVal(java.util.Map&lt;? super K,? extends java.lang.Object&gt;, kotlin.Function1&lt;? super kotlin.PropertyMetadata,? extends K&gt;, kotlin.Function2&lt;? super T,? super K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ReadOnlyProperty T get(R, kotlin.PropertyMetadata) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadOnlyProperty&lt;java.lang.Object,T&gt; mapVal(java.util.Map&lt;? super java.lang.String,? extends java.lang.Object&gt;, kotlin.Function2&lt;? super java.lang.Object,? super java.lang.String,? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.BlockingLazyVal BlockingLazyVal(java.lang.Object, kotlin.Function0&lt;? extends T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.NULL_VALUE INSTANCE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadWriteProperty&lt;java.lang.Object,T&gt; mapVar(java.util.Map&lt;? super java.lang.String,java.lang.Object&gt;, kotlin.Function2&lt;? super java.lang.Object,? super java.lang.String,? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadOnlyProperty&lt;java.lang.Object,T&gt; blockingLazy(java.lang.Object, kotlin.Function0&lt;? extends T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVal K key(kotlin.PropertyMetadata) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.Delegates kotlin.properties.ReadOnlyProperty blockingLazy$default(kotlin.properties.Delegates, java.lang.Object, kotlin.Function0, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.ChangeSupport void addChangeListener(kotlin.properties.ChangeListener) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.LazyVal T get(java.lang.Object, kotlin.PropertyMetadata) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.properties.FixedMapVal FixedMapVal(java.util.Map, kotlin.Function1, kotlin.Function2, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
