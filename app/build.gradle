import java.text.SimpleDateFormat


/*
 1.0 - readingtracker/non-gradle Reading Tracker
 1.1 - initial versions of gradle-based Reading Tracker
 1.2 - gradle-based Reading Tracker, externalized API Keys
 1.3 - we are ReadingTracker now, all remmants of old name should be gone
 1.4 - preparation for github is almost done
 1.5 - should be 'first playstore builds'
 1.6 - first user-visible functions...ppm counter,etc
 */
def myVersionName=getVersionName()

//default version code
def myVersionCode=0

//apply plugin: 'com.parse'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        //classpath 'com.parse.tools:gradle:1.+'
        classpath 'com.github.forsety:adr:0.1'

    }
}

/*parse {
    if(project.hasProperty("apiKeysPath") ) {
        File apiKeysFile = new File(System.getenv('HOME') + "/" + project.property("apiKeysPath"))
        if (apiKeysFile.canRead()) {
            def Properties apiKeysProps = new Properties()

            apiKeysProps.load(new FileInputStream(apiKeysFile))
            def parseAppId= apiKeysProps['PARSE_APP_ID'];
            def parseMasterKey=apiKeysProps['PARSE_MASTER_KEY'];
            //prevent empty values
            if (parseAppId==null) {
                throw new GradleException("Parse APP ID not configured but API Key file was here");
            }
            if (parseMasterKey==null) {
                throw new GradleException("Parse MASTER KEY not configured but API Key file was here");
            }
            applicationId  parseAppId
            masterKey parseMasterKey
        }
        else {
            //Handle case were  we run under Travis CI
            if (System.getenv('RUNNING_UNDER_TRAVIS')=='YES') {
                applicationId System.getenv('PARSE_APP_ID_TRAVIS')
                masterKey System.getenv('PARSE_MASTER_KEY_TRAVIS')
            }
            else
            {
                //regular unconfigured build
                throw new GradleException("Could not read Parse API Keys. Check README.md");
            }
        }
    }

    uploadSymbols true //upload symobls if ProGuard was used!

}*/

apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'

//apply plugin: 'kotlin-android'
/*
compileKotlin {
    kotlinOptions.annotations = file('annotations')
}

 */

/**
 * Get SHA1 hash of head revision whch we build
 * @return hash of head
 */
def gitSha() {
    def res = 'git rev-parse HEAD'.execute([], project.rootDir).text.trim()

    //ignore extra files if it's Jenkinks
    if (System.getenv('RUNNING_UNDER_INTERNAL_JENKINS')!='YES') {
        def diff = 'git diff'.execute([], project.rootDir).text.trim()
        if (diff != null && diff.length() > 0) {
            res += "-dirty"
        }
    }

    return res
}
/**
 * Get short version of last commit message
 * @return short version of last commit message
 */
def gitLastCommit() {
    return 'git log -1 --no-merges --pretty=oneline --abbrev-commit'.execute().text.trim()
}
/**
 * Get build time in short form
 * @return build time in short form
 */
def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC")) //RTZ5 (Omsk) is UTC+6 per https://ru.wikipedia.org/wiki/Время_в_России
    return df.format(new Date())
}

/**
 * Get more readable form of build time like 2014/12/31 23:59
 * @return time of build in more human-readable form
 */
def buildTimeHumanReadable() {
    def df = new SimpleDateFormat("yyyy/MM/dd HH:mm")
    df.setTimeZone(TimeZone.getTimeZone("UTC")) //RTZ5 (Omsk) is UTC+6 per https://ru.wikipedia.org/wiki/Время_в_России
    return df.format(new Date())
}
/**
 * get hostname on whichbuild was run
 * @return builder's hostname
 */
def getHostname() {
    return 'hostname'.execute().text.trim()
}
/**
 * user name used for build
 * @return user login used for build (could help if local build)
 */
def getUsername() {
    return System.getProperty("user.name")
}

/**
 * Gets the version name from the latest Git tag in case I want to use this scheme
 * @return latest git tag
 */
def getVersionName()  {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

/**
 *
 * Ask for version code from service which will generated increasing numbers
 * if you don't have one you could modify build to use something along
 * lines from https://stackoverflow.com/questions/21405457/autoincrement-versioncode-with-gradle-extra-properties
 * Will try 2 times
 * TODO: make something on windows
 *
 * @param auth like user:password
 * @param url like host.domain.tld/url/to/get
 * @return version code
 */
def getVersionCodeFromNetwork(auth,url) {
   println "Asking for version code..."
   def res=getVersionCodeFromNetworkReal(auth,url)
   if (!res.isInteger()) {
       //try one more time.
       res=getVersionCodeFromNetworkReal(auth,url)
       if (!res.isInteger()) {
           //it's very likely not network server error (one I use is clustered,etc), it's our local network so say this aloud
           throw new GradleException("Failed to query version code from network, URL "+url+" failed 2 times");
       } else {
           println "Got version code "+res+" on 2nd attempt"
       }
   }
   else {
       println "Got version code "+res+" on 1st attempt"
   }
   return res
}
/**
 * This one does actual work for def getVersionCodeFromNetwork(auth,url)
 * @param auth like user:password
 * @param url like host.domain.tld/url/to/get
 * @return version code
 */
def getVersionCodeFromNetworkReal(auth,url) {
    def cmd='curl -X GET https://'+auth+'@'+url
    return cmd.execute().text.trim()
}


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion


    def versionCodeNetworkURL=''
    def versionCodeNetworkAuth=''
    def versionSuffix="none"

    def buildDateTime=buildTimeHumanReadable()

    productFlavors {
        //initial values of config vars. real values will be loaded later
        def parseAppId=""
        def parseClientKey=""
        def apiServer=""

        //Load API Keys for usage by test system
        def parseAppIdForTestHarness= ""
        def parseClientKeyForTestHarness=""
        def parseUserNameForTestHarness=""
        def parsePasswordForTestHarness=""


        //Mixpanel
        def mixpanelToken=""

        //Rollbar
        def rollbarApiKey=""

        //Twitter
        def twitterConsumerKey=""
        def twitterConsumerSecret=""

        //full sha1 of build version
        def gitSha=gitSha()

        if (System.getenv('RUNNING_UNDER_TRAVIS')=='YES') {
            //internal and travis
            parseAppId=System.getenv('PARSE_APP_ID_TRAVIS')
            parseClientKey=System.getenv('PARSE_CLIENT_KEY_TRAVIS')
            apiServer=System.getenv('API_SERVER')
            mixpanelToken=System.getenv('MIXPANEL_TOKEN')
            rollbarApiKey=System.getenv('ROLLBAR_API_KEY')
            twitterConsumerKey=System.getenv('TWITTER_CONSUMER_KEY')
            twitterConsumerSecret=System.getenv('TWITTER_CONSUMER_SECRET')



            parseAppIdForTestHarness=System.getenv('PARSE_APP_ID_FOR_TEST_HARNESS_TRAVIS')
            parseClientKeyForTestHarness=System.getenv('PARSE_CLIENT_KEY_FOR_TEST_HARNESS_TRAVIS')
            parseUserNameForTestHarness=System.getenv('PARSE_USERNAME_FOR_TEST_HARNESS_TRAVIS')
            parsePasswordForTestHarness=System.getenv('PARSE_PASSWORD_FOR_TEST_HARNESS_TRAVIS')



            //test mode only
            //Espresso testing
            /*
            espressoTesting {

                buildConfigField "String","PARSE_APP_ID", "\""+parseAppIdForTestHarness+"\""
                buildConfigField "String","PARSE_CLIENT_KEY","\""+parseClientKeyForTestHarness+"\""
                buildConfigField "String","HOCKEYAPP_APP_ID", "\""+hockeyAppAppId+"\""
                buildConfigField "String","BUILD_DATE_TIME","\""+buildDateTime+" UTC\""
                buildConfigField "String","PARSE_USERNAME_FOR_TEST_HARNESS","\""+parseUserNameForTestHarness+"\""
                buildConfigField "String","PARSE_PASSWORD_FOR_TEST_HARNESS","\""+parsePasswordForTestHarness+"\""

                buildConfigField "String","COUNTLY_SERVER", "\""+countlyServer+"\""
                buildConfigField "String","COUNTLY_APP_KEY","\""+countlyAppKey+"\""


                buildConfigField "String","BUILD_GIT_SHA1", "\""+gitSha+"\""

                buildConfigField "String","BUILDER_TYPE","\"Travis CI\""

                buildConfigField "String","BUILD_HOST", "\""+getHostname()+"\""
                buildConfigField "String","BUILD_USER", "\""+getUsername()+"\""
                myVersionCode=0
                println "Building Travis-CI-based build "+myVersionName+" build "+myVersionCode+" with full sha1 "+gitSha
            } */

        }
        else { //internal or playStore, not Travis CI so we have files in their places

            if(project.hasProperty("apiKeysPath") ) {
                File apiKeysFile = new File(System.getenv('HOME') + "/" + project.property("apiKeysPath"))
                if (apiKeysFile.canRead()) {
                    def Properties apiKeysProps = new Properties()
                    apiKeysProps.load(new FileInputStream(apiKeysFile))
                    parseAppId= apiKeysProps['PARSE_APP_ID'];
                    parseClientKey=apiKeysProps['PARSE_CLIENT_KEY'];
                    apiServer=apiKeysProps['API_SERVER'];
                    //Load API Keys for usage by test system
                    parseAppIdForTestHarness= apiKeysProps['PARSE_APP_ID_FOR_TEST_HARNESS'];
                    parseClientKeyForTestHarness=apiKeysProps['PARSE_CLIENT_KEY_FOR_TEST_HARNESS'];
                    parseUserNameForTestHarness=apiKeysProps['PARSE_USERNAME_FOR_TEST_HARNESS'];
                    parsePasswordForTestHarness=apiKeysProps['PARSE_PASSWORD_FOR_TEST_HARNESS'];
                    mixpanelToken=apiKeysProps['MIXPANEL_TOKEN'];
                    rollbarApiKey=apiKeysProps['ROLLBAR_API_KEY'];
                    twitterConsumerKey=apiKeysProps['TWITTER_CONSUMER_KEY'];
                    twitterConsumerSecret=apiKeysProps['TWITTER_CONSUMER_SECRET'];

                    //prevent empty values
                    if (parseAppId==null) {
                        throw new GradleException("Parse APP ID not configured but API Key file was here");
                    }
                    if (parseClientKey==null) {
                        throw new GradleException("Parse CLIENT KEY not configured but API Key file was here");
                    }
                    if (apiServer==null) {
                        throw new GradleException("API Server not configured but API Key file was here");
                    }
                    if (parseAppIdForTestHarness==null) {
                        throw new GradleException("Parse APP ID for tests not configured but API Key file was here");
                    }
                    if (parseClientKeyForTestHarness==null) {
                        throw new GradleException("Parse CLIENT KEY for tests not configured but API Key file was here");
                    }

                    if (parseUserNameForTestHarness==null) {
                        throw new GradleException("Parse username for tests not configured but API Key file was here");
                    }
                    if (parsePasswordForTestHarness==null) {
                        throw new GradleException("Parse password for tests not configured but API Key file was here");
                    }

                    if (mixpanelToken==null) {
                        throw new GradleException("Mixpanel Token not configured not configured but API Key file was here");
                    }
                    if (rollbarApiKey==null) {
                        throw new GradleException("Rollbar API Key not configured not configured but API Key file was here");
                    }
                    if (twitterConsumerKey==null) {
                        throw new GradleException("Twitter Consumer Key not configured not configured but API Key file was here");
                    }
                    if (twitterConsumerSecret==null) {
                        throw new GradleException("Twitter Consumer Secret not configured not configured but API Key file was here");
                    }



                    /*
                    if (versionCodeNetworkURL==null) {
                        throw new GradleException("network url for version code updates was not configured but API Key file was here");
                    }
                    if (versionCodeNetworkAuth==null) {
                        throw new GradleException("network auth for version code updates was not configured but API Key file was here");
                    }

                    */

                    //support for updating versionCode from network server
                    versionCodeNetworkURL=apiKeysProps['VERSION_CODE_URL']
                    versionCodeNetworkAuth=apiKeysProps['VERSION_CODE_AUTH']
                    //we now have all info, ask for version code
                    //TODO:update with new builds
                    myVersionCode=2699  //getVersionCodeFromNetwork(versionCodeNetworkAuth,versionCodeNetworkURL).toInteger()



                }
            } //has apiKeysPath
            else {
                throw new GradleException("API Keys not found. Check README.md");
            }
            //non-flavor-specific

            //flavor-specifc

            //internal test builds
            internal {
                buildConfigField "String","PARSE_APP_ID", "\""+parseAppId+"\""
                buildConfigField "String","PARSE_CLIENT_KEY","\""+parseClientKey+"\""
                buildConfigField "String","API_SERVER","\""+apiServer+"\""
                buildConfigField "String","BUILD_DATE_TIME","\""+buildDateTime+" UTC\""
                buildConfigField "String","PARSE_USERNAME_FOR_TEST_HARNESS","\""+parseUserNameForTestHarness+"\""
                buildConfigField "String","PARSE_PASSWORD_FOR_TEST_HARNESS","\""+parsePasswordForTestHarness+"\""

                buildConfigField "String","MIXPANEL_TOKEN","\""+mixpanelToken+"\""
                buildConfigField "String","ROLLBAR_API_KEY","\""+rollbarApiKey+"\""
                buildConfigField "String","TWITTER_CONSUMER_KEY","\""+twitterConsumerKey+"\""
                buildConfigField "String","TWITTER_CONSUMER_SECRET","\""+twitterConsumerSecret+"\""


                buildConfigField "String","BUILD_GIT_SHA1", "\""+gitSha+"\""

                if (System.getenv('RUNNING_UNDER_INTERNAL_JENKINS')=='YES') {
                    buildConfigField "String","BUILDER_TYPE","\"jenkins\""

                }
                else
                {
                    buildConfigField "String","BUILDER_TYPE","\"internal\""
                }
                buildConfigField "String","BUILD_HOST", "\""+getHostname()+"\""
                buildConfigField "String","BUILD_USER", "\""+getUsername()+"\""
                println "Building internal build "+myVersionName+" build "+myVersionCode+" with full sha1 "+gitSha
            }
           //Espresso testing
            /*
           espressoTesting {


               applicationId "com.viorsan.readingtracker.espressoTesting"
               buildConfigField "String","PARSE_APP_ID", "\""+parseAppId+"\""
               buildConfigField "String","PARSE_CLIENT_KEY","\""+parseClientKey+"\""
               buildConfigField "String","HOCKEYAPP_APP_ID", "\""+hockeyAppAppId+"\""
               buildConfigField "String","BUILD_DATE_TIME","\""+buildDateTime+" UTC\""
               buildConfigField "String","PARSE_USERNAME_FOR_TEST_HARNESS","\""+parseUserNameForTestHarness+"\""
               buildConfigField "String","PARSE_PASSWORD_FOR_TEST_HARNESS","\""+parsePasswordForTestHarness+"\""


               buildConfigField "String","BUILD_GIT_SHA1", "\""+gitSha+"\""

               if (System.getenv('RUNNING_UNDER_INTERNAL_JENKINS')=='YES') {
                   buildConfigField "String","BUILDER_TYPE","\"jenkins\""
               }
               else
               {
                   buildConfigField "String","BUILDER_TYPE","\"internal\""
               }
               buildConfigField "String","BUILD_HOST", "\""+getHostname()+"\""
               buildConfigField "String","BUILD_USER", "\""+getUsername()+"\""
               println "Building internal(automated tests) build "+myVersionName+" build "+myVersionCode+" with full sha1 "+gitSha
           } */
           //builds for PlayStore
           playStore {

               buildConfigField "String","PARSE_APP_ID", "\""+parseAppId+"\""
               buildConfigField "String","PARSE_CLIENT_KEY","\""+parseClientKey+"\""
               buildConfigField "String","API_SERVER","\""+apiServer+"\""
               buildConfigField "String","BUILD_DATE_TIME","\""+buildDateTime+" UTC\""

               buildConfigField "String","MIXPANEL_TOKEN","\""+mixpanelToken+"\""
               buildConfigField "String","ROLLBAR_API_KEY","\""+rollbarApiKey+"\""
               buildConfigField "String","TWITTER_CONSUMER_KEY","\""+twitterConsumerKey+"\""
               buildConfigField "String","TWITTER_CONSUMER_SECRET","\""+twitterConsumerSecret+"\""


               buildConfigField "String","BUILD_GIT_SHA1", "\""+gitSha+"\""

               buildConfigField "String","BUILDER_TYPE","\"internal\""

               //I don't actually use it in PlayStore builds
               buildConfigField "String","PARSE_USERNAME_FOR_TEST_HARNESS","\""+""+"\""
               buildConfigField "String","PARSE_PASSWORD_FOR_TEST_HARNESS","\""+""+"\""

               buildConfigField "String","BUILD_HOST", "\""+getHostname()+"\""
               buildConfigField "String","BUILD_USER", "\""+getUsername()+"\""


               println "Building playStore build "+myVersionName+"  build "+myVersionCode+" with full sha1 "+gitSha
           } //playStore

        } //internal-or-playstore-but-not-travis-ci

        } //productFlavors




    defaultConfig {
        applicationId "com.viorsan.readingtracker"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode myVersionCode
        versionName myVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        com.android.ddmlib.DdmPreferences.setTimeOut(5 * 60 * 1000); //5 minutes

    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            versionNameSuffix "-debug"
            applicationIdSuffix ".debug"
            testCoverageEnabled true
        }
    }

    //https://stackoverflow.com/questions/33499046/android-project-automation-test-in-circleci-build-failed-with-an-exception
    adbOptions {
        timeOutInMs 5 * 60 * 1000 // 5 minutes
    }
    //code sign support
    //Load values used for application signing
    if(project.hasProperty("debugSigningPropertiesPath") && project.hasProperty("releaseSigningPropertiesPath")) {

        // Files which hold values for signing
        File debugPropsFile = new File(System.getenv('HOME') +  "/" + project.property("debugSigningPropertiesPath"))
        File releasePropsFile = new File(System.getenv('HOME') +  "/" + project.property("releaseSigningPropertiesPath"))

        if(debugPropsFile.exists() && releasePropsFile.exists()) {
            Properties debugProps = new Properties()
            debugProps.load(new FileInputStream(debugPropsFile))

            Properties releaseProps = new Properties()
            releaseProps.load(new FileInputStream(releasePropsFile))

            // Write loaded values to config
            signingConfigs {
                debug {
                    storeFile file(debugPropsFile.getParent() + "/" + debugProps['keystore'])
                    storePassword debugProps['keystore.password']
                    keyAlias debugProps['keyAlias']
                    keyPassword debugProps['keyPassword']
                }
                release {
                    storeFile file(releasePropsFile.getParent() + "/" + releaseProps['keystore'])
                    storePassword releaseProps['keystore.password']
                    keyAlias releaseProps['keyAlias']
                    keyPassword releaseProps['keyPassword']
                }
            }
            buildTypes {
                debug {
                    signingConfig signingConfigs.debug
                }
                release {
                    signingConfig signingConfigs.release
                }
            }
        }
    }
}

/*
  This was taken care of on my build scripts level
  And you could manually remove comments around next task
  or you could configure your devices to disable animations by hand manually
*/
/*
task grantAnimationPermission(type: Exec, dependsOn: 'installTestingDebug') { // or install{productFlavour}{buildType}
    // commandLine "adb shell pm grant $android.defaultConfig.packageName android.permission.SET_ANIMATION_SCALE".split(' ')
    commandLine "adb shell pm grant $android.defaultConfig.applicationId android.permission.SET_ANIMATION_SCALE".split(' ')
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('connectedAndroidTest')) {
        task.dependsOn grantAnimationPermission
    }
}
*/

def copyAndReplaceText(source, dest, Closure replaceText) {
    dest.write(replaceText(source.text))
}

// Override Data in Manifest - This can be done using different Manifest files for each flavor, this way there's no need to modify the manifest
android.applicationVariants.all { variant ->

    if (variant.name.startsWith('espressoTesting')) { // Where dev is the one you'll use to run Espresso tests
        System.out.println("Not removing the SET_ANIMATION_SCALE permission for $variant.name")
        return
    }
    System.out.println("Removing the SET_ANIMATION_SCALE permission for $variant.name")

    variant.outputs.each { output ->
        output.processManifest.doLast {
            copyAndReplaceText(manifestOutputFile, manifestOutputFile) {
                def replaced = it.replace('<uses-permission android:name="android.permission.SET_ANIMATION_SCALE" />', '');
                if (replaced.contains('SET_ANIMATION_SCALE')) {
                    // For security, imagine an extra space is added before closing tag, then the replace would fail - TODO use regex
                    throw new RuntimeException("Don't ship with this permission! android.permission.SET_ANIMATION_SCALE")
                }
                replaced
            }
        }
    }
}

//log details about tests
gradle.projectsEvaluated {
    tasks.withType(Test) { task ->
        task.afterTest { desc, result ->
            println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
        }
    }
}

apply plugin: 'com.github.triplet.play'
play {
    //only on build systems
    jsonFile = file(System.getenv('HOME')+'/.androidSigning/PlayStoreAccess.json')
    track = 'alpha'
}


//our regular dependencies
dependencies {
    compile 'com.google.code.gson:gson:2.2.2'
    //compile 'com.google.android.gms:play-services:6.5.+'
    compile files('libs/HockeySDK-3.0.1.jar')
    compile files('libs/acra-4.4.0.jar')
    compile files('libs/json-simple-1.1.1.jar')
    compile files('libs/jmdns-3.4.1.jar')

    compile support.appCompat
    compile support.design
    //compile "com.android.support:support-v4:21.0.3"
    //compile "com.android.support:appcompat-v7:21.0.3"
    compile "com.android.support:multidex:1.0.+"


    compile "com.mixpanel.android:mixpanel-android:4.+"
    compile "com.google.android.gms:play-services:3.1+"

    testCompile assertJCore
    testCompile junit

    androidTestCompile supportTest.espressoCore
    androidTestCompile supportTest.rules

    androidTestCompile support.annotations

    testCompile 'org.robolectric:robolectric:3.0'

    compile 'net.danlew:android.joda:2.7.1'

    compile 'com.jakewharton:butterknife:6.0.0' //https://jakewharton.github.io/butterknife/

    compile 'com.rollbar:rollbar-android:0.1.3'

    //Parse Platform - Opensource one from https://github.com/ParsePlatform/Parse-SDK-Android
    compile 'com.parse:parse-android:1.13.1'

    //ParseUI
    //compile 'com.facebook.android:facebook-android-sdk:3.21.0'
    //compile project(':ParseLoginUI')

    //https://github.com/ParsePlatform/ParseUI-Android

    // Module dependency on ParseUI libraries sources
    compile 'com.parse:parseui-login-android:0.0.1'
    compile 'com.parse:parseui-widget-android:0.0.1'

    // use idea from https://stackoverflow.com/questions/35138908/unable-to-execute-dex-multiple-dex-files-define-lbolts-aggregateexception
    compile ('com.facebook.android:facebook-android-sdk:4.6.0'){
        exclude group: 'com.parse.bolts', module: 'bolts-android'
    }
    compile 'com.parse:parsefacebookutils-v4-android:1.10.3@aar'
    compile 'com.parse:parsetwitterutils-android:1.10.5'
    //compile 'com.squareup.okhttp:okhttp-urlconnection:2.7.2' //so Twitter access work - see https://github.com/ParsePlatform/ParseUI-Android/issues/122



    androidTestCompile 'org.hamcrest:hamcrest-integration:1.1'
    androidTestCompile 'org.hamcrest:hamcrest-core:1.1'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.1'


}

//adr https://github.com/Forsety/android-drawable-resizer
/*
apply plugin: 'com.github.forsety.adr'

adr {
    minDensity "mdpi"
    baseDensity "xxxhdpi"
    generateTvDpi true
}
*/


