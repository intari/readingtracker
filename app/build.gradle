import java.text.SimpleDateFormat


/*
 1.0 - readingtracker/non-gradle Reading Tracker
 1.1 - initial versions of gradle-based Reading Tracker
 1.2 - gradle-based Reading Tracker, externalized API Keys
 1.3 - we are ReadingTracker now, all remmants of old name should be gone
 1.4 - preparation for github is almost done
 */
def myVersionName="1.4"

//default version code
def myVersionCode=0

apply plugin: 'com.parse'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://maven.parse.com/repo'
        }
    }
    dependencies {
        classpath 'com.parse.tools:gradle:1.+'
        //http://kotlinlang.org/docs/reference/using-gradle.html
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.10.195'


    }
}
dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.10.195'
}

parse {
    if(project.hasProperty("apiKeysPath") ) {
        File apiKeysFile = new File(System.getenv('HOME') + "/" + project.property("apiKeysPath"))
        if (apiKeysFile.canRead()) {
            def Properties apiKeysProps = new Properties()

            apiKeysProps.load(new FileInputStream(apiKeysFile))
            def parseAppId= apiKeysProps['PARSE_APP_ID'];
            def parseMasterKey=apiKeysProps['PARSE_MASTER_KEY'];
            //prevent empty values
            if (parseAppId==null) {
                throw new GradleException("Parse APP ID not configured but API Key file was here");
            }
            if (parseMasterKey==null) {
                throw new GradleException("Parse MASTER KEY not configured but API Key file was here");
            }
            applicationId  parseAppId
            masterKey parseMasterKey
        }
        else {
            //Handle case were  we run under Travis CI
            if (System.getenv('RUNNING_UNDER_TRAVIS')=='YES') {
                applicationId System.getenv('PARSE_APP_ID_TRAVIS')
                masterKey System.getenv('PARSE_MASTER_KEY_TRAVIS')
            }
            else
            {
                //regular unconfigured build
                throw new GradleException("Could not read Parse API Keys. Check README.md");
            }
        }
    }

    uploadSymbols true //upload symobls if ProGuard was used!

}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
/*
compileKotlin {
    kotlinOptions.annotations = file('annotations')
}

 */


def gitSha() {
    def res = 'git rev-parse HEAD'.execute([], project.rootDir).text.trim()

    def diff = 'git diff'.execute([], project.rootDir).text.trim()
    if (diff != null && diff.length() > 0) {
        res += "-dirty"
    }
    return res
}

def gitLastCommit() {
    return 'git log -1 --no-merges --pretty=oneline --abbrev-commit'.execute().text.trim()
}

def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC")) //RTZ5 (Omsk) is UTC+6 per https://ru.wikipedia.org/wiki/Время_в_России
    return df.format(new Date())
}

//more human readable version
def buildTimeHumanReadable() {
    def df = new SimpleDateFormat("yyyy/MM/dd HH:mm")
    df.setTimeZone(TimeZone.getTimeZone("UTC")) //RTZ5 (Omsk) is UTC+6 per https://ru.wikipedia.org/wiki/Время_в_России
    return df.format(new Date())
}

def getHostname() {
    return 'hostname'.execute().text.trim()
}
def getUsername() {
    return System.getProperty("user.name")
}

/*
 * Ask for version code from service which will generated increasing numbers
 * if you don't have one you could modify build to use something along
 * lines from https://stackoverflow.com/questions/21405457/autoincrement-versioncode-with-gradle-extra-properties
 *
 */
//TODO:do something for windows
def getVersionCodeFromNetwork(auth,url) {
    def cmd='curl -X GET https://'+auth+'@'+url
    return cmd.execute().text.trim()
}

apply plugin: 'robolectric'

robolectric {
    include '**/*Test.class'
    exclude '**/espresso/**/*.class'

    // use afterTest to listen to the test execution results
    afterTest { descriptor, result ->
        println "Executing test for {$descriptor.name} with result: ${result.resultType}"
    }
}


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion


    def versionCodeNetworkURL=''
    def versionCodeNetworkAuth=''
    def versionSuffix="none"

    productFlavors {

        internal {

            if(project.hasProperty("apiKeysPath") ) {
                File apiKeysFile = new File(System.getenv('HOME') + "/" + project.property("apiKeysPath"))
                if (apiKeysFile.canRead()) {
                    def Properties apiKeysProps = new Properties()
                    apiKeysProps.load(new FileInputStream(apiKeysFile))
                    def parseAppId= apiKeysProps['PARSE_APP_ID'];
                    def parseClientKey=apiKeysProps['PARSE_CLIENT_KEY'];
                    def hockeyAppAppId=apiKeysProps['HOCKEYAPP_APP_ID'];

                    //Load API Keys for usage by test system 
                    def parseAppIdForTestHarness= apiKeysProps['PARSE_APP_ID_FOR_TEST_HARNESS'];
                    def parseClientKeyForTestHarness=apiKeysProps['PARSE_CLIENT_KEY_FOR_TEST_HARNESS'];
                    def parseUserNameForTestHarness=apiKeysProps['PARSE_USERNAME_FOR_TEST_HARNESS'];
                    def parsePasswordForTestHarness=apiKeysProps['PARSE_PASSWORD_FOR_TEST_HARNESS'];

                    //support for updating versionCode from network server
                    versionCodeNetworkURL=apiKeysProps['VERSION_CODE_URL']
                    versionCodeNetworkAuth=apiKeysProps['VERSION_CODE_AUTH']


                    //Count.ly analytics
                    def countlyServer=apiKeysProps['COUNTLY_SERVER']
                    def countlyAppKey=apiKeysProps['COUNTLY_APPKEY']

                    //Flurry
                    def flurryApiKey=apiKeysProps['FLURRY_APIKEY']


                    //prevent empty values
                    if (parseAppId==null) {
                        throw new GradleException("Parse APP ID not configured but API Key file was here");
                    }
                    if (parseClientKey==null) {
                        throw new GradleException("Parse CLIENT KEY not configured but API Key file was here");
                    }
                    if (hockeyAppAppId==null) {
                        throw new GradleException("HockeyApp APP ID not configured but API Key file was here");
                    }
                    if (parseAppIdForTestHarness==null) {
                        throw new GradleException("Parse APP ID for tests not configured but API Key file was here");
                    }
                    if (parseClientKeyForTestHarness==null) {
                        throw new GradleException("Parse CLIENT KEY for tests not configured but API Key file was here");
                    }

                    if (parseUserNameForTestHarness==null) {
                        throw new GradleException("Parse username for tests not configured but API Key file was here");
                    }
                    if (parsePasswordForTestHarness==null) {
                        throw new GradleException("Parse password for tests not configured but API Key file was here");
                    }

                    if (countlyServer==null) {
                        throw new GradleException("Count.ly Server URL not configured not configured but API Key file was here");
                    }
                    if (countlyAppKey==null) {
                        throw new GradleException("Count.ly App Key not configured not configured but API Key file was here");
                    }


                    /*
                    if (versionCodeNetworkURL==null) {
                        throw new GradleException("network url for version code updates was not configured but API Key file was here");
                    }
                    if (versionCodeNetworkAuth==null) {
                        throw new GradleException("network auth for version code updates was not configured but API Key file was here");
                    }

                    */
                    buildConfigField "String","PARSE_APP_ID", "\""+parseAppId+"\""
                    buildConfigField "String","PARSE_CLIENT_KEY","\""+parseClientKey+"\""
                    buildConfigField "String","HOCKEYAPP_APP_ID", "\""+hockeyAppAppId+"\""
                    buildConfigField "String","BUILD_DATE_TIME","\""+buildTimeHumanReadable()+" UTC\""
                    buildConfigField "String","PARSE_APP_ID_FOR_TEST_HARNESS", "\""+parseAppIdForTestHarness+"\""
                    buildConfigField "String","PARSE_CLIENT_KEY_FOR_TEST_HARNESS","\""+parseClientKeyForTestHarness+"\""
                    buildConfigField "String","PARSE_USERNAME_FOR_TEST_HARNESS","\""+parseUserNameForTestHarness+"\""
                    buildConfigField "String","PARSE_PASSWORD_FOR_TEST_HARNESS","\""+parsePasswordForTestHarness+"\""


                    buildConfigField "String","COUNTLY_SERVER", "\""+countlyServer+"\""
                    buildConfigField "String","COUNTLY_APP_KEY","\""+countlyAppKey+"\""
                    buildConfigField "String","FLURRY_API_KEY","\""+flurryApiKey+"\""

                    if (System.getenv('RUNNING_UNDER_INTERNAL_JENKINS')=='YES') {
                        buildConfigField "String","BUILDER_TYPE","\"internal-jenkins\""
                    }
                    else
                    {
                        buildConfigField "String","BUILDER_TYPE","\"internal\""
                    }
                    //we now have all info, ask for version code
                    myVersionCode=getVersionCodeFromNetwork(versionCodeNetworkAuth,versionCodeNetworkURL).toInteger()

                }
                else {
                    if (System.getenv('RUNNING_UNDER_TRAVIS')=='YES') {
                        buildConfigField "String","PARSE_APP_ID", "\""+System.getenv('PARSE_APP_ID_TRAVIS')+"\""
                        buildConfigField "String","PARSE_CLIENT_KEY","\""+System.getenv('PARSE_CLIENT_KEY_TRAVIS')+"\""
                        buildConfigField "String","HOCKEYAPP_APP_ID", "\""+System.getenv('HOCKEYAPP_APP_ID_TRAVIS')+"\""
                        buildConfigField "String","BUILD_DATE_TIME","\""+buildTimeHumanReadable()+" UTC\""
                        buildConfigField "String","PARSE_APP_ID_FOR_TEST_HARNESS", "\""+System.getenv('PARSE_APP_ID_FOR_TEST_HARNESS_TRAVIS')+"\""
                        buildConfigField "String","PARSE_CLIENT_KEY_FOR_TEST_HARNESS","\""+System.getenv('PARSE_CLIENT_KEY_FOR_TEST_HARNESS_TRAVIS')+"\""
                        buildConfigField "String","PARSE_USERNAME_FOR_TEST_HARNESS","\""+System.getenv('PARSE_USERNAME_FOR_TEST_HARNESS_TRAVIS')+"\""
                        buildConfigField "String","PARSE_PASSWORD_FOR_TEST_HARNESS","\""+System.getenv('PARSE_PASSWORD_FOR_TEST_HARNESS_TRAVIS')+"\""

                        buildConfigField "String","COUNTLY_SERVER", "\""+System.getenv('COUNTLY_SERVER')+"\""
                        buildConfigField "String","COUNTLY_APP_KEY","\""+System.getenv('COUNTLY_APP_KEY')+"\""
                        buildConfigField "String","FLURRY_API_KEY","\""+""+"\""

                        buildConfigField "String","BUILDER_TYPE","\"Travis CI\""

                        //try to get version code from network (using configured env vars)
                        //versionCodeNetworkURL=System.getenv('VERSION_CODE_URL')
                        //versionCodeNetworkAuth=System.getenv('VERSION_CODE_AUTH')
                        //I'm NOT interested in this until I start use Travis CI not only for tests but for submission to hockeyapp too
                        myVersionCode=0

                    }
                    else
                    {
                        throw new GradleException("Could not read API Keys but we knew where it should be. Check README.md");
                    }
                }
            }
            else {
                throw new GradleException("API Keys not found. Check README.md");
            }

            buildConfigField "String","BUILD_HOST", "\""+getHostname()+"\""
            buildConfigField "String","BUILD_USER", "\""+getUsername()+"\""
        }
        if (System.getenv('RUNNING_UNDER_TRAVIS')!='YES') {
            playStore {
                if(project.hasProperty("apiKeysPath") ) {
                    File apiKeysFile = new File(System.getenv('HOME') + "/" + project.property("apiKeysPath"))
                    if (apiKeysFile.canRead()) {
                        def Properties apiKeysProps = new Properties()
                        apiKeysProps.load(new FileInputStream(apiKeysFile))
                        def parseAppId= apiKeysProps['PARSE_APP_ID'];
                        def parseClientKey=apiKeysProps['PARSE_CLIENT_KEY'];
                        def hockeyAppAppId=apiKeysProps['HOCKEYAPP_APP_ID'];


                        //support for updating versionCode from network server
                        versionCodeNetworkURL=apiKeysProps['VERSION_CODE_URL']
                        versionCodeNetworkAuth=apiKeysProps['VERSION_CODE_AUTH']

                        //Count.ly analytics
                        def countlyServer=apiKeysProps['COUNTLY_SERVER']
                        def countlyAppKey=apiKeysProps['COUNTLY_APPKEY']

                        //Flurry
                        def flurryApiKey=apiKeysProps['FLURRY_APIKEY']

                        //prevent empty values
                        if (parseAppId==null) {
                            throw new GradleException("Playstore Release:Parse APP ID not configured but API Key file was here");
                        }
                        if (parseClientKey==null) {
                            throw new GradleException("Playstore Release:Parse CLIENT KEY not configured but API Key file was here");
                        }
                        if (hockeyAppAppId==null) {
                            throw new GradleException("Playstore Release:HockeyApp APP ID not configured but API Key file was here");
                        }
                        if (countlyServer==null) {
                            throw new GradleException("Playstore Release:Count.ly Server URL not configured not configured but API Key file was here");
                        }
                        if (countlyAppKey==null) {
                            throw new GradleException("Playstore Release:Count.ly App Key not configured not configured but API Key file was here");
                        }
                        if (flurryApiKey==null) {
                            throw new GradleException("Playstore Release:Flurry Api Key not configured not configured but API Key file was here");
                        }

                        /*
                        if (versionCodeNetworkURL==null) {
                            throw new GradleException("network url for version code updates was not configured but API Key file was here");
                        }
                        if (versionCodeNetworkAuth==null) {
                            throw new GradleException("network auth for version code updates was not configured but API Key file was here");
                        }

                        */
                        buildConfigField "String","PARSE_APP_ID", "\""+parseAppId+"\""
                        buildConfigField "String","PARSE_CLIENT_KEY","\""+parseClientKey+"\""
                        buildConfigField "String","HOCKEYAPP_APP_ID", "\""+hockeyAppAppId+"\""
                        buildConfigField "String","BUILD_DATE_TIME","\""+buildTimeHumanReadable()+" UTC\""

                        buildConfigField "String","COUNTLY_SERVER", "\""+countlyServer+"\""
                        buildConfigField "String","COUNTLY_APP_KEY","\""+countlyAppKey+"\""
                        buildConfigField "String","FLURRY_API_KEY","\""+flurryApiKey+"\""

                        buildConfigField "String","BUILDER_TYPE","\"internal\""

                        //I don't actually use it in PlayStore builds
                        buildConfigField "String","PARSE_APP_ID_FOR_TEST_HARNESS", "\""+""+"\""
                        buildConfigField "String","PARSE_CLIENT_KEY_FOR_TEST_HARNESS","\""+""+"\""
                        buildConfigField "String","PARSE_USERNAME_FOR_TEST_HARNESS","\""+""+"\""
                        buildConfigField "String","PARSE_PASSWORD_FOR_TEST_HARNESS","\""+""+"\""

                        //we now have all info, ask for version code
                        myVersionCode=getVersionCodeFromNetwork(versionCodeNetworkAuth,versionCodeNetworkURL).toInteger()

                    }
                    else {
                        throw new GradleException("Playstore Release:Could not read API Keys but we knew where it should be. Check README.md");
                    }
                }
                else {
                    throw new GradleException("Playstore Release:API Keys not found. Check README.md");
                }

                buildConfigField "String","BUILD_HOST", "\""+getHostname()+"\""
                buildConfigField "String","BUILD_USER", "\""+getUsername()+"\""
            }

        }

    }


    defaultConfig {
        applicationId "com.viorsan.readingtracker"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode myVersionCode
        versionName myVersionName+"."+myVersionCode+'-git-sha1-'+gitSha()
    }





    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }


    sourceSets {
        androidTest {
            setRoot('src/test')
        }
        main.java.srcDirs += 'src/main/kotlin'

    }

    //code sign support, based off http://habrahabr.ru/post/205308/
    //Load values used for application signing
    if(project.hasProperty("debugSigningPropertiesPath") && project.hasProperty("releaseSigningPropertiesPath")) {

        // Files which hold values for signing
        File debugPropsFile = new File(System.getenv('HOME') +  "/" + project.property("debugSigningPropertiesPath"))
        File releasePropsFile = new File(System.getenv('HOME') +  "/" + project.property("releaseSigningPropertiesPath"))

        if(debugPropsFile.exists() && releasePropsFile.exists()) {
            Properties debugProps = new Properties()
            debugProps.load(new FileInputStream(debugPropsFile))

            Properties releaseProps = new Properties()
            releaseProps.load(new FileInputStream(releasePropsFile))

            // Write loaded values to config
            signingConfigs {
                debug {
                    storeFile file(debugPropsFile.getParent() + "/" + debugProps['keystore'])
                    storePassword debugProps['keystore.password']
                    keyAlias debugProps['keyAlias']
                    keyPassword debugProps['keyPassword']
                }
                release {
                    storeFile file(releasePropsFile.getParent() + "/" + releaseProps['keystore'])
                    storePassword releaseProps['keystore.password']
                    keyAlias releaseProps['keyAlias']
                    keyPassword releaseProps['keyPassword']
                }
            }
            buildTypes {
                debug {
                    signingConfig signingConfigs.debug
                }
                release {
                    signingConfig signingConfigs.release
                }
            }
        }
    }
}


//our regular dependencies
dependencies {
    compile 'com.google.code.gson:gson:2.2.2'
    //compile 'com.google.android.gms:play-services:6.5.+'
    compile files('libs/HockeySDK-3.0.1.jar')
    compile files('libs/acra-4.4.0.jar')
    compile files('libs/json-simple-1.1.1.jar')
    compile files('libs/jmdns-3.4.1.jar')
    compile files('libs/FlurryAnalytics-5.0.0.jar')
    compile 'com.jakewharton:butterknife:6.0.0' //https://jakewharton.github.io/butterknife/
    compile "com.android.support:support-v4:21.0.3"
    compile 'ly.count:sdk-android:+'

    compile "com.android.support:gridlayout-v7:21.0.2"
    compile "com.android.support:cardview-v7:21.0.2"

    compile "com.android.support:appcompat-v7:21.0.3"

    //Parse Platform
    compile 'com.parse.bolts:bolts-android:1.+'

    compile fileTree(dir: '../libs', include: 'Parse-*.jar')
    compile fileTree(dir: '../libs', include: 'ParseCrashReporting-*.jar')

    //ParseUI
    compile 'com.facebook.android:facebook-android-sdk:3.21.0'
    compile project(':ParseLoginUI')

    //Robolectric tests
    androidTestCompile('org.robolectric:robolectric:2.4') {
        exclude module: "commons-logging"
        exclude module: "httpclient"
    }
    androidTestCompile('junit:junit:4.11')
    // add the stripped version of android.jar, 'fix' per https://gist.github.com/avbk/d82c44ed8bef5782dbe5
    androidTestCompile files("../testlibs/android-18-stripped.jar")

}



//Per  https://github.com/x2on/gradle-hockeyapp-plugin/issues/30 it's dependencies must be in root project
apply plugin: 'de.felixschulze.gradle.hockeyapp'
hockeyapp {
    if(project.hasProperty("apiKeysPath") ) {
        File apiKeysFile = new File(System.getenv('HOME') + "/" + project.property("apiKeysPath"))
        if (apiKeysFile.canRead()) {
            def Properties apiKeysProps = new Properties()

            apiKeysProps.load(new FileInputStream(apiKeysFile))
            def hockeyappToken = apiKeysProps['HOCKEYAPP_TOKEN'];

            //prevent empty values
            if (hockeyappToken == null) {
                throw new GradleException("HockeyApp API Token not configured (this is required for automatic build submission)");
            }
            //configure plugin
            // common settings for 'real' builds
            apiToken = hockeyappToken;
            releaseType = 2
            notify = 1
            status = 2
            notesType = 1
            commitSha=gitSha()
            //WARNING:Cyrillic is not supported here (plugin issue), TODO: report this
            notes = "* Automatic build at "+buildTimeHumanReadable()+" UTC\r\n* Changes:"+gitLastCommit()+"\r\n* git sha1:"+gitSha()

            // internal-jenkins
            if (System.getenv('RUNNING_UNDER_INTERNAL_JENKINS')=='YES') {
                buildServerUrl = System.getenv('BUILD_URL')
            }
            // regular internal build
            else {

            } 

          }
        else {
            if (System.getenv('RUNNING_UNDER_TRAVIS')=='YES') {
                apiToken = System.getenv('HOCKEYAPP_TOKEN_TRAVIS');
                releaseType = 2
                notify = 0
                status = 2
                notesType = 1
                commitSha=gitSha()
                notes = "* Travis CI-based automatic build at "+buildTimeHumanReadable()+" UTC\r\n* Changes:"+gitLastCommit()+"\r\n* git sha1:"+gitSha()
            }
            else {
                throw new GradleException("Could not read HockeyApp API Token for automatic build submission");
            }
        }
    } else {
        throw new GradleException("API Keys not found. Check README.md (or don't use HockeyApp's Gradle task)");
    }

}
