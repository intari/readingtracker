import java.text.SimpleDateFormat


//update version code on eache build
/*
 1.0 - dollmaster/non-gradle booktracker
 1.1 - initial versions of gradle-based booktracker
 */
def myVersionName="1.1"
def myVersionCode=113


//https://parse.com/apps/quickstart#analytics/crashreporting/android/existing
apply plugin: 'com.parse'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://maven.parse.com/repo'
        }
    }
    dependencies {
        classpath 'com.parse.tools:gradle:1.+'
    }
}

//see https://parse.com/docs/android_guide#crashreporting
//may be I should user my configured CloudCode repository?

parse {
    applicationId '***REMOVED***'
    masterKey '***REMOVED***'
    uploadSymbols true //upload symobls if ProGuard was used!

}

apply plugin: 'com.android.application'


def gitSha() {
    def res = 'git rev-parse HEAD'.execute([], project.rootDir).text.trim()

    def diff = 'git diff'.execute([], project.rootDir).text.trim()
    if (diff != null && diff.length() > 0) {
        res += "-dirty"
    }
    return res
}

def gitLastCommit() {
    return 'git log -1 --no-merges --pretty=oneline --abbrev-commit'.execute().text.trim()
}

def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'") //you can change it
    df.setTimeZone(TimeZone.getTimeZone("UTC")) //RTZ5 (Omsk) is UTC+6 per https://ru.wikipedia.org/wiki/Время_в_России
    return df.format(new Date())
}


android {
    compileSdkVersion 'Google Inc.:Google APIs:17'
    buildToolsVersion "21.1.2"

    //autoincrementing version code
    //based off https://stackoverflow.com/questions/21405457/autoincrement-versioncode-with-gradle-extra-properties
    //and
    if(project.hasProperty("versionPropertiesPath") ) {
        File versionPropsFile = new File(System.getenv('HOME') + "/" + project.property("versionPropertiesPath"))
        if (versionPropsFile.canRead()) {
            def Properties versionProps = new Properties()

            versionProps.load(new FileInputStream(versionPropsFile))

            def code = versionProps['VERSION_CODE'].toInteger() + 1

            versionProps['VERSION_CODE']=code.toString()
            versionProps.store(versionPropsFile.newWriter(), null)

            defaultConfig {
                applicationId "com.viorsan.dollmaster"
                minSdkVersion 17
                targetSdkVersion 17
                versionCode code
                versionName myVersionName+"."+code+"-built_at-"+buildTime()+'-git-sha1-'+gitSha();
            }
        }
        else {
            throw new GradleException("Could not read version information:"+System.getenv('HOME') + "/" + project.property("versionPropertiesPath")+" is not readable")
        }
    }
    else {
        throw new GradleException("Could not read version information:versionPropertiesPath not configured")
    }




    productFlavors {
        //TODO: find out HOW to configure this CORRECTLY
        //Why first flavor choose for debug automatically?
        //how to use flavors to change packageName/ApplicationId/title?
        internal {

            if(project.hasProperty("apiKeysPathInternal") ) {
                File apiKeysFile = new File(System.getenv('HOME') + "/" + project.property("apiKeysPathInternal"))
                if (apiKeysFile.canRead()) {
                    def Properties apiKeysProps = new Properties()
                    apiKeysProps.load(new FileInputStream(apiKeysFile))
                    def parseAppId= apiKeysProps['PARSE_APP_ID'];
                    def parseClientKey=apiKeysProps['PARSE_CLIENT_KEY'];
                    def hockeyAppAppId=apiKeysProps['HOCKEYAPP_APP_ID'];
                    //prevent empty values
                    if (parseAppId==null) {
                        throw new GradleException("Parse APP ID not configured for internal build");
                    }
                    if (parseClientKey==null) {
                        throw new GradleException("Parse CLIENT KEY not configured for internal build");
                    }
                    if (hockeyAppAppId==null) {
                        throw new GradleException("HockeyApp APP ID not configured for internal build");
                    }

                    buildConfigField "String","PARSE_APP_ID", "\""+parseAppId+"\""
                    buildConfigField "String","PARSE_CLIENT_KEY","\""+parseClientKey+"\""
                    buildConfigField "String","HOCKEYAPP_APP_ID", "\""+hockeyAppAppId+"\""

                }
                else {
                    throw new GradleException("Could not read API Keys for internal build");
                }
            }
            else {
                throw new GradleException("API Keys for internal build were not specified");
            }


         }
        playstore {
            //build for PlayStore
            if(project.hasProperty("apiKeysPathPlayStore") ) {
                File apiKeysFile = new File(System.getenv('HOME') + "/" + project.property("apiKeysPathPlayStore"))
                if (apiKeysFile.canRead()) {
                    def Properties apiKeysProps = new Properties()
                    apiKeysProps.load(new FileInputStream(apiKeysFile))
                    def parseAppId= apiKeysProps['PARSE_APP_ID'];
                    def parseClientKey=apiKeysProps['PARSE_CLIENT_KEY'];
                    def hockeyAppAppId=apiKeysProps['HOCKEYAPP_APP_ID'];
                    //prevent empty values
                    if (parseAppId==null) {
                        throw new GradleException("Parse APP ID not configured for PlayStore build");
                    }
                    if (parseClientKey==null) {
                        throw new GradleException("Parse CLIENT KEY not configured for PlayStore build");
                    }
                    if (hockeyAppAppId==null) {
                        throw new GradleException("HockeyApp APP ID not configured for PlayStore build");
                    }

                    buildConfigField "String","PARSE_APP_ID", "\""+parseAppId+"\""
                    buildConfigField "String","PARSE_CLIENT_KEY","\""+parseClientKey+"\""
                    buildConfigField "String","HOCKEYAPP_APP_ID", "\""+hockeyAppAppId+"\""

                }
                else {
                    throw new GradleException("Could not read API Keys for PlayStore build");
                }
            }
            else {
                throw new GradleException("API Keys for PlayStore build were not specified");
            }

        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }


    //code sign support, based off http://habrahabr.ru/post/205308/
    //Загружаем значения для подписи приложения
    if(project.hasProperty("debugSigningPropertiesPath") && project.hasProperty("releaseSigningPropertiesPath")) {

        //Файлы в которых хранятся значения для подписи
        File debugPropsFile = new File(System.getenv('HOME') +  "/" + project.property("debugSigningPropertiesPath"))
        File releasePropsFile = new File(System.getenv('HOME') +  "/" + project.property("releaseSigningPropertiesPath"))

        if(debugPropsFile.exists() && releasePropsFile.exists()) {
            Properties debugProps = new Properties()
            debugProps.load(new FileInputStream(debugPropsFile))

            Properties releaseProps = new Properties()
            releaseProps.load(new FileInputStream(releasePropsFile))

            //Дописываем в конфиг загруженные значения
            signingConfigs {
                debug {
                    storeFile file(debugPropsFile.getParent() + "/" + debugProps['keystore'])
                    storePassword debugProps['keystore.password']
                    keyAlias debugProps['keyAlias']
                    keyPassword debugProps['keyPassword']
                }
                release {
                    storeFile file(releasePropsFile.getParent() + "/" + releaseProps['keystore'])
                    storePassword releaseProps['keystore.password']
                    keyAlias releaseProps['keyAlias']
                    keyPassword releaseProps['keyPassword']
                }
            }
            buildTypes {
                debug {
                    signingConfig signingConfigs.debug
                }
                release {
                    signingConfig signingConfigs.release
                }
            }
        }
    }
}

dependencies {
    compile 'com.parse.bolts:bolts-android:1.+'
    compile fileTree(dir: 'libs', include: 'Parse-*.jar')
    compile fileTree(dir: 'libs', include: 'ParseCrashReporting-*.jar')
}

dependencies {
    compile 'com.google.code.gson:gson:2.2.2'
    compile 'com.google.android.gms:play-services:6.5.+'
    compile files('libs/HockeySDK-3.0.1.jar')
    compile files('libs/acra-4.4.0.jar')
    //compile files('libs/android-support-v13.jar')
    compile files('libs/json-simple-1.1.1.jar')
    compile files('libs/jmdns-3.4.1.jar')
}

//Per  https://github.com/x2on/gradle-hockeyapp-plugin/issues/30 it's dependencies must be in root project
apply plugin: 'de.felixschulze.gradle.hockeyapp'
hockeyapp {
    if(project.hasProperty("apiKeysPathInternal") ) {
        File apiKeysFile = new File(System.getenv('HOME') + "/" + project.property("apiKeysPathInternal"))
        if (apiKeysFile.canRead()) {
            def Properties apiKeysProps = new Properties()

            apiKeysProps.load(new FileInputStream(apiKeysFile))
            def hockeyappToken = apiKeysProps['HOCKEYAPP_TOKEN'];

            //prevent empty values
            if (hockeyappToken == null) {
                throw new GradleException("HockeyApp API Token not configured (this is required for automatic build submission)");
            }
            //configure plugin
            apiToken = hockeyappToken;
            releaseType = 2
            notify = 1
            status = 2
            notesType = 1
            commitSha=gitSha()
            //WARNING:Cyrillic here = мусор, проблема именно на уровне плагина а не гита. нельзя не в git commit ни просто в сообщениях
            //форматирование должно быть именно таким:\r\n* TextHere
            notes = "* Automatic build at "+buildTime()+" UTC\r\n* Changes:"+gitLastCommit()+"\r\n* git sha1:"+gitSha() //+"\r\n* Test line\r\n* Test"


        }
        else {
            throw new GradleException("Could not read API Token for automatic build submission");
        }
    }

}

