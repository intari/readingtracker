import java.text.SimpleDateFormat


/*
 1.0 - readingtracker/non-gradle Reading Tracker
 1.1 - initial versions of gradle-based Reading Tracker
 1.2 - gradle-based Reading Tracker, externalized API Keys
 1.3 - we are ReadingTracker now, all remmants of old name should be gone
 1.4 - preparation for github is almost done
 */
def myVersionName="1.4"


apply plugin: 'com.parse'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://maven.parse.com/repo'
        }
    }
    dependencies {
        classpath 'com.parse.tools:gradle:1.+'
    }
}

parse {
    if(project.hasProperty("apiKeysPath") ) {
        File apiKeysFile = new File(System.getenv('HOME') + "/" + project.property("apiKeysPath"))
        if (apiKeysFile.canRead()) {
            def Properties apiKeysProps = new Properties()

            apiKeysProps.load(new FileInputStream(apiKeysFile))
            def parseAppId= apiKeysProps['PARSE_APP_ID'];
            def parseMasterKey=apiKeysProps['PARSE_MASTER_KEY'];
            //prevent empty values
            if (parseAppId==null) {
                throw new GradleException("Parse APP ID not configured but API Key file was here");
            }
            if (parseMasterKey==null) {
                throw new GradleException("Parse MASTER KEY not configured but API Key file was here");
            }

            applicationId  parseAppId
            masterKey parseMasterKey
        }
        else {
            //Handle case were  we run under Travis-CI
            if (System.getenv('RUNNING_UNDER_TRAVIS')=='YES') {
                applicationId System.getenv('PARSE_APP_ID_TRAVIS')
                masterKey System.getenv('PARSE_MASTER_KEY_TRAVIS')

            }
            else
            {
                //regular unconfigured build
                throw new GradleException("Could not read Parse API Keys. Check README.md");
            }
        }
    }

    uploadSymbols true //upload symobls if ProGuard was used!

}

apply plugin: 'com.android.application'


def gitSha() {
    def res = 'git rev-parse HEAD'.execute([], project.rootDir).text.trim()

    def diff = 'git diff'.execute([], project.rootDir).text.trim()
    if (diff != null && diff.length() > 0) {
        res += "-dirty"
    }
    return res
}

def gitLastCommit() {
    return 'git log -1 --no-merges --pretty=oneline --abbrev-commit'.execute().text.trim()
}

def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC")) //RTZ5 (Omsk) is UTC+6 per https://ru.wikipedia.org/wiki/Время_в_России
    return df.format(new Date())
}

//more human readable version
def buildTimeHumanReadable() {
    def df = new SimpleDateFormat("yyyy/MM/dd HH:mm")
    df.setTimeZone(TimeZone.getTimeZone("UTC")) //RTZ5 (Omsk) is UTC+6 per https://ru.wikipedia.org/wiki/Время_в_России
    return df.format(new Date())
}


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion


    //autoincrementing version code
    //based off https://stackoverflow.com/questions/21405457/autoincrement-versioncode-with-gradle-extra-properties
    if(project.hasProperty("versionPropertiesPath") ) {
        File versionPropsFile = new File(System.getenv('HOME') + "/" + project.property("versionPropertiesPath"))
        if (versionPropsFile.canRead()) {
            def Properties versionProps = new Properties()

            versionProps.load(new FileInputStream(versionPropsFile))

            def code = versionProps['VERSION_CODE'].toInteger() + 1

            versionProps['VERSION_CODE']=code.toString()
            versionProps.store(versionPropsFile.newWriter(), null)

            defaultConfig {
                applicationId "com.viorsan.readingtracker"
                minSdkVersion rootProject.ext.minSdkVersion
                targetSdkVersion rootProject.ext.targetSdkVersion
                versionCode code
                versionName myVersionName+"."+code+"-built_at-"+buildTime()+'-git-sha1-'+gitSha();
            }

        }
        else {
            throw new GradleException("Could not read version information:"+System.getenv('HOME') + "/" + project.property("versionPropertiesPath")+" is not readable")
        }
    }
    else {
        //Handle case were  we run under Travis-CI
        if (System.getenv('RUNNING_UNDER_TRAVIS')=='YES') {
            //setup for Travis builds
            defaultConfig {
                applicationId "com.viorsan.readingtracker"
                minSdkVersion rootProject.ext.minSdkVersion
                targetSdkVersion rootProject.ext.targetSdkVersion
                versionCode 9999
                versionName myVersionName + "." + code + "-built_at-" + buildTime() + '-git-sha1-' + gitSha() + "-travis-ci";
            }
        }
        else
        {
            //not Travis-CI, just regular unconfigured build
            throw new GradleException("Could not read version information:versionPropertiesPath not configured. Check README.md")
        }
    }


    productFlavors {

        internal {

            if(project.hasProperty("apiKeysPath") ) {
                File apiKeysFile = new File(System.getenv('HOME') + "/" + project.property("apiKeysPath"))
                if (apiKeysFile.canRead()) {
                    def Properties apiKeysProps = new Properties()
                    apiKeysProps.load(new FileInputStream(apiKeysFile))
                    def parseAppId= apiKeysProps['PARSE_APP_ID'];
                    def parseClientKey=apiKeysProps['PARSE_CLIENT_KEY'];
                    def hockeyAppAppId=apiKeysProps['HOCKEYAPP_APP_ID'];
                    //prevent empty values
                    if (parseAppId==null) {
                        throw new GradleException("Parse APP ID not configured but API Key file was here");
                    }
                    if (parseClientKey==null) {
                        throw new GradleException("Parse CLIENT KEY not configured but API Key file was here");
                    }
                    if (hockeyAppAppId==null) {
                        throw new GradleException("HockeyApp APP ID not configured but API Key file was here");
                    }

                    buildConfigField "String","PARSE_APP_ID", "\""+parseAppId+"\""
                    buildConfigField "String","PARSE_CLIENT_KEY","\""+parseClientKey+"\""
                    buildConfigField "String","HOCKEYAPP_APP_ID", "\""+hockeyAppAppId+"\""
                    buildConfigField "String","BUILD_DATE_TIME","\""+buildTimeHumanReadable()+" UTC\""

                }
                else {
                    throw new GradleException("Could not read API Keys but API Key file was here");
                }
            }
            else {
                if (System.getenv('RUNNING_UNDER_TRAVIS')=='YES') {

                    buildConfigField "String","PARSE_APP_ID", "\""+System.getenv('PARSE_APP_ID_TRAVIS')+"\""
                    buildConfigField "String","PARSE_CLIENT_KEY","\""+System.getenv('PARSE_CLIENT_KEY_TRAVIS')+"\""
                    buildConfigField "String","HOCKEYAPP_APP_ID", "\""+System.getenv('HOCKEYAPP_APP_ID_TRAVIS')+"\""
                    buildConfigField "String","BUILD_DATE_TIME","\""+buildTimeHumanReadable()+" UTC\""

                }
                else
                {
                    //not Travis-CI, just regular unconfigured build
                    throw new GradleException("API Keys not found. Check README.md");
                }
            }

         }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }


    //code sign support, based off http://habrahabr.ru/post/205308/
    //Load values used for application signing
    if(project.hasProperty("debugSigningPropertiesPath") && project.hasProperty("releaseSigningPropertiesPath")) {

        // Files which hold values for signing
        File debugPropsFile = new File(System.getenv('HOME') +  "/" + project.property("debugSigningPropertiesPath"))
        File releasePropsFile = new File(System.getenv('HOME') +  "/" + project.property("releaseSigningPropertiesPath"))

        if(debugPropsFile.exists() && releasePropsFile.exists()) {
            Properties debugProps = new Properties()
            debugProps.load(new FileInputStream(debugPropsFile))

            Properties releaseProps = new Properties()
            releaseProps.load(new FileInputStream(releasePropsFile))

            // Write loaded values to config
            signingConfigs {
                debug {
                    storeFile file(debugPropsFile.getParent() + "/" + debugProps['keystore'])
                    storePassword debugProps['keystore.password']
                    keyAlias debugProps['keyAlias']
                    keyPassword debugProps['keyPassword']
                }
                release {
                    storeFile file(releasePropsFile.getParent() + "/" + releaseProps['keystore'])
                    storePassword releaseProps['keystore.password']
                    keyAlias releaseProps['keyAlias']
                    keyPassword releaseProps['keyPassword']
                }
            }
            buildTypes {
                debug {
                    signingConfig signingConfigs.debug
                }
                release {
                    signingConfig signingConfigs.release
                }
            }
        }
    }
}

dependencies {
    compile 'com.parse.bolts:bolts-android:1.+'

    compile fileTree(dir: '../libs', include: 'Parse-*.jar')
    compile fileTree(dir: '../libs', include: 'ParseCrashReporting-*.jar')
}

dependencies {
    compile 'com.google.code.gson:gson:2.2.2'
    compile 'com.google.android.gms:play-services:6.5.+'
    compile files('libs/HockeySDK-3.0.1.jar')
    compile files('libs/acra-4.4.0.jar')
    compile files('libs/json-simple-1.1.1.jar')
    compile files('libs/jmdns-3.4.1.jar')
}

dependencies {
    compile 'com.facebook.android:facebook-android-sdk:3.21.0'
    compile project(':ParseLoginUI')
    compile 'com.android.support:support-v4:21.0.0'
}


//Per  https://github.com/x2on/gradle-hockeyapp-plugin/issues/30 it's dependencies must be in root project
apply plugin: 'de.felixschulze.gradle.hockeyapp'
hockeyapp {
    if(project.hasProperty("apiKeysPath") ) {
        File apiKeysFile = new File(System.getenv('HOME') + "/" + project.property("apiKeysPath"))
        if (apiKeysFile.canRead()) {
            def Properties apiKeysProps = new Properties()

            apiKeysProps.load(new FileInputStream(apiKeysFile))
            def hockeyappToken = apiKeysProps['HOCKEYAPP_TOKEN'];

            //prevent empty values
            if (hockeyappToken == null) {
                throw new GradleException("HockeyApp API Token not configured (this is required for automatic build submission)");
            }
            //configure plugin
            apiToken = hockeyappToken;
            releaseType = 2
            notify = 1
            status = 2
            notesType = 1
            commitSha=gitSha()
            //WARNING:Cyrillic is not supported here (plugin issue), TODO: report this
            notes = "* Automatic build at "+buildTimeHumanReadable()+" UTC\r\n* Changes:"+gitLastCommit()+"\r\n* git sha1:"+gitSha()
        }
        else {
            throw new GradleException("Could not read HockeyApp API Token for automatic build submission");
        }
    } else {
        throw new GradleException("API Keys not found. Check README.md (or don't use HockeyApp's Gradle task)");
    }

}

